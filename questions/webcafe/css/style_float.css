/* CSS를 활용한 레이아웃 및 UI 디자인 */
body{
    margin: 0;
}

h1, h2, h3, h4, h5, h6{
    font-size: 1em;
    font-weight: normal;
    margin: 0;
}


/* float 이슈를 해결하기 위한 css코드 */
/* 공통모듈로 정해놓고 사용할 수 있음. */
.clearfix::after{
    /* ::after, ::before -> 인라인요소  :after는 level2방식
    부모의 뒤나 앞에 자식요소를 만들 수 있다. 
    그러므로 content속성이 꼭 들어와야한다. */
    content: "";
    /* 값을 넣으면 height가 생겨서 비워둠 */
    display: block;
    clear: both;
    /* clear: both; 를 쓰면 떠있는 요소까지 고려해서 마진을 자동으로 추가해서 공간을 만든다. */
    /* 부모의 높이를 가지게 한다. */
    /* clear를 형제레벨에 사용한다.(그래서 ::after) */
    /* clear는 block속성에만 적용된다. ex)span.. */
    /* 인라인 속성은 width를 주어도 먹지 않는다. */
}

/* 레이아웃 */
.container{
    background-color: #aaa;
    height: 100vh; /* vh 화면에 보여지는 크기 */
    
    /* 설정 너비는 940px이지만 */
    /* 보더, 패딩, 마진값을 추가해서 총 1160px이 됨 */
}

.header, .visual, .main, .slogan, .footer{
    width: 940px;
    margin: 0 auto;
}

/* 헤더 */
.header{
    background-color: yellowgreen;
    height: 10vh;    
}

/* 비주얼 */
.visual{
    background-color: orange;
    height: 10vh;    
}

/* 메인 */
.main{
    background-color: beige;
    /* height: 60vh; */

    /* overflow: hidden; */
    /* 넘치는 영역을 어떻게 해결할까?: 숨겨라;
    자식요소를 감지해서 블록을 생성
    대신 position으로 바깥 영역으로 이동하면 숨겨진다.*/
}

.main div{
    height: 100px;
}

.group1{
    background: lightgreen;
    width: 250px;
    float: left;
    /* 떠있는 상태, 부모영역 안에서 맨 왼쪽으로 */
    position: relative;
    left: -50px;
}

.group2{
    background: lightslategray;
    width: 380px;
    float: left;
}

.group3{
    background: lightseagreen;
    width: 190px;
    float: left;
}


/* 슬로건 */
.slogan{
    background-color: indianred;
    height: 10vh;
    margin-top: 50px;
}

/* 푸터 */
.footer-bg {
    background-color: #333;
}

.footer{
    background-color: indigo;
    height: 10vh;    
}


